Turbo Assembler	 Version 4.1	    12/01/20 15:10:08	    Page 1
LAB2.ASM



      1				     ;*	СОЗДАНИЕ СЕГМЕНТА СТЭКА *
      2	0000			     STACKSEG SEGMENT PARA "STACK"
      3	0000  20*(0000)				  DW	  32   DUP(0)
      4	0040			     STACKSEG ENDS
      5				     ;*	СОЗДАНИЕ СЕГМЕНТА ДАННЫХ *
      6	0000			     DSEG SEGMENT PARA PUBLIC "DATA"
      7	0000  00			     FL	   DB 0				       ; ФЛАГ НЕГАТИВНОГО	    +
      8				     (1)/ПОЗИТИВНОГО(0) ЧИСЛА
      9	0001  05 ?? 04*(3F)		     DUMP  DB 5, ?, 4 DUP('?') ; СТРУКТКРА ДАННЫХ ДЛЯ	ХРАНЕНИЯ    +
     10				     ВВОДА
     11	0007  00			     ERRCD DB 0				       ; ФЛАГ ОШИБКИ
     12											       ; 0 - ОШИБОК НЕТ
     13											       ; 1 - ОШИБКА
     14	0008  2A 45 52 52 4F 52	2A	     ERRTXT  DB	'*ERROR*'
     15	000F  20 2D 20 59 4F 55	20+			     DB	' - YOU	NEED TO	ENTER THE NUMBER$'
     16	      4E 45 45 44 20 54	4F+
     17	      20 45 4E 54 45 52	20+
     18	      54 48 45 20 4E 55	4D+
     19	      42 45 52 24
     20	002F  45 4E 54 45 52 20	59+	     MSGTXT  DB	'ENTER YOU NUMBER:$'
     21	      4F 55 20 4E 55 4D	42+
     22	      45 52 3A 24
     23	0041  41 4E 53 57 45 52	3A+	     MSG2TXT DB	'ANSWER:  $'
     24	      20 20 24
     25	004B			     DSEG ENDS
     26				     ;--------------------------------------------------------------------------
     27				     ;*	СОЗДАНИЕ СЕГМЕНТА КОДА *
     28	0000			     CSEG     SEGMENT PARA PUBLIC "CODE"
     29				     ;*	НАЧАЛО ОСНОВНОЙ ПРОЦЕДУРЫ
     30	0000			      MAIN    PROC    FAR
     31					      ASSUME  CS: CSEG,	DS: DSEG, SS: STACKSEG
     32					;* MAGIC * (РАЗМЕЩЕНИЕ ПРОГРАММЫ В ПАМЯТИ?)
     33	0000  1E			     PUSH     DS
     34	0001  B8 0000			     MOV      AX, 0
     35	0004  50			     PUSH     AX
     36	0005  B8 0000s			     MOV      AX, DSEG	     ; *ИНИЦИАЛИЗАЦИЯ СЕГМЕНТНОГО
     37	0008  8E D8			     MOV      DS, AX	     ;	РЕГИСРА 'DS'*
     38					;* MAGIC END'S *
     39
     40	000A  E8 00BB			     CALL     ENTER_MSG_PROC
     41	000D  E8 0021			 CALL	      INPUT_PROC	     ;ВЫЗОВ ПРОЦЕДУРЫ "ВВОДА	ДАННЫХ"
     42
     43	0010  80 3E 0007r 01		     CMP      ERRCD,1		     ; *ЕСЛИ ЕСТЬ ОШИБКА
     44	0015  74 16			     JE		     ERR_EXIT		     ;	ПЕРЕЙТИ К ВЫВОДУ		    +
     45				     СООБЩЕНИЯ*
     46
     47					;* УМНОЖЕНИЕ ВВЕДЕНОГО ЧИСЛА НА 3 (ВАРИАНТ 21)
     48	0017  BB 0003			     MOV      BX,3		     ; ДЛЯ ВОЗМОЖНОСТИ РАБОТЫ С '3'
     49	001A  F7 EB			     IMUL     BX			     ; 'AX' УМНОЖАЕТСЯ НА 'BX'
     50					;* РЕЗУЛЬТАТ УМНОЖЕНИЯ ПОМЕЩАЕТСЯ В 'AX'
     51
     52	001C  8B D8			     MOV      BX,AX		      ;	ЧТО БЫ НЕ ПОТЕРЯТЬ ВВЕДЕННОЕ+
     53				     ЧИСЛО
     54	001E  E8 00B3			     CALL     ENTER_MSG2_PROC
     55	0021  8B C3			     MOV      AX,BX		      ;	ЧТО БЫ НЕ ПОТЕРЯТЬ ВВЕДЕННОЕ+
     56				     ЧИСЛО
     57	0023  E8 0068			 CALL	      OUTPUT_PROC    ;ВЫЗОВ ПРОЦЕДУРЫ "ВЫВОДА ДАННЫХ"
Turbo Assembler	 Version 4.1	    12/01/20 15:10:08	    Page 2
LAB2.ASM



     58
     59	0026  80 3E 0007r 00		     CMP      ERRCD,0		     ; *ЕСЛИ ОШИБОК НЕТ
     60	002B  74 03			     JE	     EXIT_POINT	     ;	ВЫЙТИ ИЗ	ПРОГРАММЫ*
     61
     62	002D				ERR_EXIT:
     63	002D  E8 0088			     CALL ERRMSG_PROC	     ; ВЫВОД СООБЩЕНИЯ ОБ ОШИБКЕ НА	    +
     64				     ЭКРАН
     65
     66	0030				EXIT_POINT:		     ; ДЛЯ "ВНЕШТАТНОГО" ВЫХОДА
     67
     68	0030  CB			     RET	     ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ	ВЫЗЫВАЮЩЕЙ	    +
     69				     ПРОЦЕДУРЕ
     70	0031			      MAIN ENDP
     71				     ;*	КОНЕЦ ОСНОВНОЙ ПРОЦЕДУРЫ
     72				     ;--------------------------------------------------------------------------
     73				     ;*	НАЧАЛО ПРОЦЕДУРЫ	"ВВОДА ДАННЫХ"
     74	0031			      INPUT_PROC PROC
     75
     76	0031  C6 06 0007r 00		     MOV ERRCD,0	     ; ОБНУЛЕНИЕ КОДА ОШИБКИ
     77					;* ВВОД ДАННЫХ С КЛАВИТУРЫ *
     78	0036  BA 0001r			     LEA      DX,DUMP	     ; РАЗМЕЩЕНИЕ В 'DX' СТРУКТУРЫ 'DUMP'
     79	0039  B4 0A			     MOV      AH,10	     ; КОД '10' ПРЕРЫВНИЯ 21..
     80	003B  CD 21			     INT      21H	     ; ..ОТВЕЧАЕТ ЗА ВВОД	ДАННЫХ С		    +
     81				     КЛАВИАТУРЫ
     82					;* ВВЕДЕННЫЕ ДАННЫЕ С КЛАВИАТУРЫ ПОМЕЩЕННЫ В 'DUMP'(DUMP+
     83				     +2)
     84					;* ОПРЕДЕЛЕНИЕ КОЛ-ВА ВВЕДЕНЫХ СИМОВЛОВ
     85	003D  BE 0002r			     LEA      SI,DUMP+1	     ; РАЗМЕЩЕНИЕ В 'SI' АДРЕСА С КОЛ-ВОМ   +
     86				     ВВЕДЕНЫХ ЗНАКОВ
     87	0040  33 C9			     XOR      CX,CX	     ; ОБНУЛЕНИЕ СЧЕТЧИКА
     88	0042  8A 0C			     MOV      CL,[SI]	     ; "УСТАНОВКА" СЧЕТЧИКА
     89	0044  83 F9 00			     CMP      CX,0	     ; *ЕСЛИ НИЧЕГО НЕ ВВЕДЕНО
     90	0047  74 3F			     JE		     SOME_ERR	 ; ВЫВЕСТИ КОД ОШИБКИ
     91					;* ОПРЕДЕЛЕНИЕ ПОЗИТИВНОСТИ ЧИСЛА
     92					     ; MOV    FL,0	     ; ДЛЯ СБРОСА ФЛАГА ПОЗ/НЕГ ЧИСЛА
     93	0049  46			     INC      SI		     ; *ПЕРЕХОД С КОЛ-ВА ВВЕДЕНЫХ	    +
     94				     СИМВОЛОВ
     95										     ;	НА ПЕРВЫЙ ВВЕДЕННЫЙ	    +
     96				     СИМВОЛ.
     97	004A  8A 04			     MOV      AL,[SI]	     ;	РАЗМЕЩЕНИЕ ЕГО В РЕГИСТР ДЛЯ	    +
     98				     ОБРАБОТКИ.
     99	004C  3C 2D			     CMP      AL,'-'	     ;	ПРОВЕРКА МИНУС ЛИ ЭТО.
    100	004E  75 0D			     JNE     NO_MINUS	     ;	ЕСЛИ МИНУСА НЕТ - ПЕРЕХОД*
    101	0050  C6 06 0000r 01		     MOV	      FL,1	     ; УСТАНОКА	ФЛАГА НЕГАТИВНОГО   +
    102				     ЧИСЛА
    103	0055  FE C9			     DEC      CL		     ; УЧЕСТЬ МИНУС В КОЛ-ВЕ		    +
    104				     ВВЕДЕННЫХ	СИМВОЛОВ
    105	0057  83 F9 00			     CMP      CX,0	     ; *ЕСЛИ КРОМЕ МИНУСА НИЧЕГО НЕ	    +
    106				     ВВЕДЕНО
    107	005A  74 2C			     JE		     SOME_ERR	     ;	ВЫЙТИ ИЗ	ПРОГРАММЫ*
    108	005C  46			     INC      SI		     ; ПЕРЕЙТИ К СЛЕДУЮЩЕМУ РАЗРЯДУ+
    109				     ЧИСЛА
    110	005D				NO_MINUS:		     ;*	НАЧАЛО РАБОТЫ С ЧИСЛОМ
    111	005D  33 C0			     XOR      AX,AX	     ; ОЧИСТКА 'AX'
    112	005F  33 FF			     XOR      DI,DI	     ; ОЧИСТКА 'DI'
    113	0061  BF 000A			     MOV      DI,10	     ; ДЛЯ РАЗДЕЛЕНИЯ ЧИСЛА НА РАЗРЯДЫ
    114	0064  4E			     DEC      SI		     ; ВОЗВРАЩАЕМСЯ	К РАБОЧЕМУ	    +
Turbo Assembler	 Version 4.1	    12/01/20 15:10:08	    Page 3
LAB2.ASM



    115				     СИМВОЛУ
    116	0065				FOR_LOOP:		     ; НАЧАЛО ЦИКЛА ПРОХОДА ПО ЧИСЛУ	    +
    117				     (ПОРАЗРЯДНО)
    118	0065  46			     INC      SI		     ; ПЕРЕХОД К ПЕРВОМУ	СИМВОЛУ
    119	0066  33 DB			     XOR      BX,BX	     ; ОБНУЛЕНИЕ 'BX'
    120	0068  8A 1C			     MOV      BL,[SI]	     ; РАЗМЕЩЕНИЕ ЧИСЛА В РЕГИСТР
    121	006A  80 EB 30			     SUB      BL,'0'	     ; ПРЕОБРАЗОВАНИЕ ASCII TO DEC
    122	006D  80 FB 09			     CMP      BL,9	     ; *ЕСЛИ ВВЕДЕНА	НЕ ЦИФРА
    123	0070  77 16			     JA		     SOME_ERR	     ;	ВЫЙТИ ИЗ	ПРОГРАММЫ*
    124	0072  F7 E7			     MUL      DI		     ; *УМНОЖАЕМ 'AX' НА 10 ДЛЯ		    +
    125				     ДОБАВЛЕНИЯ МЕСТА
    126										     ;	ПОД НОВЫЙ СИМВОЛ*	(1 -> 10 +  +
    127				     'BX' = 11)
    128	0074  03 C3			     ADD      AX,BX	     ;	ПРИБАВЛЯЕМ К	ЧИСЛУ В 'AX'		    +
    129				     ПОЛУЧЕННУЮ ЦИФРУ
    130	0076  E2 ED			LOOP	     FOR_LOOP	 ; "КОНЕЦ"	ЦИКЛА ПРОХОДА ПО ЧИСЛУ
    131	0078  80 3E 0000r 01		     CMP      FL,1	     ; *ЕСЛИ ЧИСЛО НЕ ОТРИЦАТЕЛЬНОЕ
    132	007D  75 02			     JNE     NOT_NEG	     ;	НИЧЕГО НЕ ДЕЛАЕМ.
    133	007F  F7 D8			     NEG      AX		     ;	ИНЧЕ - ДЕЛАЕМ	ЕГО НЕГАТИВНЫМ.
    134	0081				NOT_NEG:
    135	0081  80 3E 0007r 00		 CMP	      ERRCD,0	   ; *ЕСЛИ ОШИБОК НЕТ
    136	0086  74 05			 JE	      EXIT	     ;	НА ВЫХОД	ИЗ ПРОЦЕДУРЫ*
    137
    138	0088				SOME_ERR:
    139	0088  C6 06 0007r 01		 MOV	      ERRCD,1		 ; ПОДНЯТЬ ФЛАГ ОШИБКИ	- 1
    140
    141	008D				EXIT:
    142	008D  C3			     RET	     ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ	ВЫЗЫВАЮЩЕЙ	    +
    143				     ПРОЦЕДУРЕ
    144	008E			      INPUT_PROC ENDP
    145				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВВОДА ДАННЫХ"
    146				     ;--------------------------------------------------------------------------
    147				      ;* НАЧАЛО ПРОЦЕДУРЫ "ВЫВОДА ДАННЫХ"
    148	008E			       OUTPUT_PROC PROC
    149
    150	008E  8B D8			     MOV      BX,AX	     ; РАЗМЕЩЕНИЕ ЧИСЛА В РЕГИСТРЕ AX
    151	0090  0B DB			     OR		      BX,BX	     ; *ЕСЛИ ЧИЛО ПОЛОЖИТЕЛЬНОЕ
    152	0092  B0 0A			     MOV      AL,0AH	 ; *ПЕРЕЙТИ НА	СЛЕДУЩУЮ СТРОКУ
    153	0094  CD 29			     INT      29H	     ;	В КОНСОЛИ*
    154	0096  79 06			     JNS	     M1			     ;	ПЕРЕЙТИ В M1.
    155	0098  B0 2D			     MOV      AL,"-"	     ;	ИНЧЕ РАЗМЕСТИТ В РЕЗУЛЬТАТЕ	    +
    156				     СИМВОЛ МИНУСА.
    157	009A  CD 29			     INT      29H	     ;	ВЫВЕСТИ МИНУС НА ЭКРАН*
    158	009C  F7 DB			     NEG      BX		     ; ИЗМЕНИТЬ	СТАРШИЙ БИТ ЧИСЛА    +
    159				     ("УБРАТЬ МИНУС")
    160	009E				M1:				     ; ТОЧКА ПРЕХОДА ЕСЛИ ЧИСЛО	    +
    161				     ПОЗИТИВНОЕ
    162	009E  8B C3			     MOV      AX,BX	     ; ОБНОВИТЬ	ЧИСЛО В РЕГИСТРЕ 'AX'	    +
    163				     (ИЗ-ЗА	"NEG BX")
    164	00A0  33 C9			     XOR      CX,CX	     ; ОБНУЛИТЬ	РЕГИСТР СЧЕТЧИКА
    165	00A2  BB 000A			     MOV      BX,10	     ; ДЛЯ РАЗДЕЛЕНИЯ ЧИСЛА НА РАЗРЯДЫ
    166	00A5				M2:				     ; НАЧАЛО ЦИКЛА "РАЗМЕЩЕНИЕ	    +
    167				     ЧИСЛА	В СТЕКЕ"
    168	00A5  33 D2			     XOR      DX,DX	     ; ОБНУЛЕНИЕ 'DX'
    169	00A7  F7 F3			     DIV      BX		     ; ДЕЛЕНИЕ 'AX' НА	'BX'(ОТДЕЛЕНИЕ	    +
    170				     РАЗРЯДА)
    171	00A9  80 C2 30			     ADD      DL,"0"	     ; DECIMAL TO ASCII
Turbo Assembler	 Version 4.1	    12/01/20 15:10:08	    Page 4
LAB2.ASM



    172	00AC  52			     PUSH     DX		     ; РАЗМЕЩЕНИЕ РЕЗУЛЬТАТА В	    +
    173				     СТЕКЕ
    174	00AD  41			     INC      CX		     ; УВЕЛИЧЕНИЕ СЧЕТЧИКА
    175	00AE  85 C0			     TEST     AX,AX	     ; *ЕСЛИ ЕЩЕ	ОСТАЛИСЬ ЦИФРЫ В ЧИСЛЕ
    176	00B0  75 F3			     JNZ      M2		     ;	ПОВТОРИТЬ "РАЗМЕЩЕНИЕ В	    +
    177				     СТЕКЕ"
    178	00B2				M3:				     ; НАЧАЛО ЦИКЛА ВЫВОДА ЧИСЛА ИЗ +
    179				     СТЕК НА ЭКРАН
    180	00B2  58			     POP      AX		     ; ДОСТАТЬ ВЕРХНЮЮ ЦИФРУ	ИЗ	    +
    181				     СТЭКА
    182	00B3  CD 29			     INT      29H	     ; ВЫВЕСТИ ЕЁ НА	ЭКРАН
    183	00B5  E2 FB			LOOP	     M3			     ; ПОВТОРИТЬ 'M3' ПОКА	СЧЕТЧИК НЕ +
    184				     '0'
    185
    186	00B7  C3			     RET	     ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ	ВЫЗЫВАЮЩЕЙ	    +
    187				     ПРОЦЕДУРЕ
    188	00B8			       OUTPUT_PROC ENDP
    189				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВЫВОДА ДАННЫХ"
    190				     ;--------------------------------------------------------------------------
    191				      ;* НАЧАЛО ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ ОБ ОШИБКЕ"
    192	00B8			       ERRMSG_PROC PROC
    193	00B8  B0 0A			      MOV     AL,0AH			     ; ПЕРЕЙТИ НА СЛЕДУЩУЮ	    +
    194				     СТРОКУ
    195	00BA  CD 29			      INT     29H
    196	00BC  B4 09			      MOV     AH,9
    197	00BE  BA 0008r			      MOV     DX,OFFSET	ERRTXT	     ; ВЫВЕСТИ СООБЩЕНИЕ
    198	00C1  CD 21			      INT     21H
    199	00C3  B8 4C00			      MOV     AX,4C00h			     ; ЗАВЕРШИТЬ ПРОГРАММУ
    200	00C6  CD 21			  INT	  21h
    201	00C8			       ERRMSG_PROC ENDP
    202				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ	ОБ ОШИБКЕ"
    203				     ;--------------------------------------------------------------------------
    204				     ;*	НАЧАЛО ПРОЦЕДУРЫ	"ВЫВОДА СООБЩЕНИЯ"
    205	00C8			       ENTER_MSG_PROC PROC
    206	00C8  B4 09			      MOV     AH,9
    207	00CA  BA 002Fr			      MOV     DX,OFFSET	MSGTXT	     ; ВЫВЕСТИ СООБЩЕНИЕ
    208	00CD  CD 21			      INT     21H
    209	00CF  B0 0A			      MOV     AL,0AH			     ; ПЕРЕЙТИ НА СЛЕДУЩУЮ	    +
    210				     СТРОКУ
    211	00D1  CD 29			      INT     29H
    212	00D3  C3			      RET	     ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ	ВЫЗЫВАЮЩЕЙ	    +
    213				     ПРОЦЕДУРЕ
    214	00D4			       ENTER_MSG_PROC ENDP
    215				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ"
    216				     ;--------------------------------------------------------------------------
    217				      ;* НАЧАЛО ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ2"
    218	00D4			       ENTER_MSG2_PROC PROC
    219	00D4  B0 0A			      MOV     AL,0AH			     ; ПЕРЕЙТИ НА СЛЕДУЩУЮ	    +
    220				     СТРОКУ
    221	00D6  CD 29			      INT     29H
    222	00D8  B4 09			      MOV     AH,9
    223	00DA  BA 0041r			      MOV     DX,OFFSET	MSG2TXT	     ; ВЫВЕСТИ СООБЩЕНИЕ
    224	00DD  CD 21			      INT     21H
    225	00DF  C3			      RET	     ;ВОЗВРАЩАЕМ УПРАВЛЕНИЕ	ВЫЗЫВАЮЩЕЙ	    +
    226				     ПРОЦЕДУРЕ
    227	00E0			       ENTER_MSG2_PROC ENDP
    228				      ;* КОНЕЦ ПРОЦЕДУРЫ "ВЫВОДА СООБЩЕНИЯ2"
Turbo Assembler	 Version 4.1	    12/01/20 15:10:08	    Page 5
LAB2.ASM



    229
    230	00E0			     CSEG ENDS	 ; КОНЕЦ СЕГМЕНТА КОДА
    231				     END MAIN	     ; ВЫХОД ИЗ ПРОГРАММЫ
Turbo Assembler	 Version 4.1	    12/01/20 15:10:08	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/01/20"
??FILENAME			  Text	 "LAB2	  "
??TIME				  Text	 "15:10:08"
??VERSION			  Number 040A
@CPU				  Text	 0101H
@CURSEG				  Text	 CSEG
@FILENAME			  Text	 LAB2
@WORDSIZE			  Text	 2
DUMP				  Byte	 DSEG:0001
ENTER_MSG2_PROC			  Near	 CSEG:00D4
ENTER_MSG_PROC			  Near	 CSEG:00C8
ERRCD				  Byte	 DSEG:0007
ERRMSG_PROC			  Near	 CSEG:00B8
ERRTXT				  Byte	 DSEG:0008
ERR_EXIT			  Near	 CSEG:002D
EXIT				  Near	 CSEG:008D
EXIT_POINT			  Near	 CSEG:0030
FL				  Byte	 DSEG:0000
FOR_LOOP			  Near	 CSEG:0065
INPUT_PROC			  Near	 CSEG:0031
M1				  Near	 CSEG:009E
M2				  Near	 CSEG:00A5
M3				  Near	 CSEG:00B2
MAIN				  Far	 CSEG:0000
MSG2TXT				  Byte	 DSEG:0041
MSGTXT				  Byte	 DSEG:002F
NOT_NEG				  Near	 CSEG:0081
NO_MINUS			  Near	 CSEG:005D
OUTPUT_PROC			  Near	 CSEG:008E
SOME_ERR			  Near	 CSEG:0088

Groups & Segments		  Bit Size Align  Combine Class

CSEG				  16  00E0 Para	  Public  CODE
DSEG				  16  004B Para	  Public  DATA
STACKSEG			  16  0040 Para	  none	  STACK
